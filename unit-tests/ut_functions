#!/bin/bash

# Functions common to all libraries
global.tolower(){
echo $1 | tr [:upper:] [:lower:]
}

ut.fail(){
    echo "fail"
    fail_count=$(( $fail_count + 1 ))
}


ut.pass(){
    echo "pass"
}


ut.test_true(){
    local function_name=$1
    shift
    $function_name  $@ >>/dev/null
    local result=$?
    echo -n "Test if true ${function_name}: " 
    if [[ $result -ne 0 ]]; then
        ut.fail
    else
        ut.pass
    fi
    return $result
}

ut.is_true(){
    local result=$1
    if [[ $result -ne 0 ]]; then
        ut.fail
    else
        ut.pass
    fi
    return $result
}


ut.test_false(){
    local function_name=$1
    shift
    $function_name $@ >>/dev/null
    local result=$?
    echo -n "Test if false ${function_name}: " 
    if [[ $result -eq 127 ]]; then
    #if 127 then function does not exist so fail
        ut.fail 
    elif [[ $result -ne 0 ]]; then
        ut.pass
    else
        ut.fail
    fi
    return $result
}

ut.is_false(){
    local result=$1
    if [[ $result -eq 127 ]]; then
    #if 127 then function does not exist so fail
        ut.fail 
    elif [[ $result -ne 0 ]]; then
        ut.pass
    else
        ut.fail
    fi
    return $result
}




ut.test_output(){
    local function_name=$1
    local input="$2"
    local expect="$3"
    local output=$($function_name "$input")
    echo "Output:"
    if [[ -z $output ]]; then
        echo "no output" 
        return 255
    elif [[ ! "$output" =~ "$expect" ]]; then
        echo "$output"
        return 1
    else
        echo "$output"
        return 0
    fi
}

ut.check_answer(){
    while [ 1 ] ; do
        read -n 1 answer
        answer=$(global.tolower $answer)
        if [[ $answer == y ]]; then
            return 0
        elif [[ $answer == n ]]; then
            return 1
        else
            echo "please answer y or n"
        fi
    done
}

ut.assert_equals(){
    local input=$1
    local expected=$2
    echo -n "Test if $input == $expected: "  
    if [[ "$input" == "$expected" ]] ; then
        ut.pass
        return 0
    else
        ut.fail
        return 0 
    fi
}
ut.assert_matches(){
    local input=$1
    local expected=$2
    echo -n "Test if $input =~ $expected: "  
    if [[ "$input" =~ "$expected" ]] ; then
        ut.pass
        return 0
    else
        ut.fail
        return 0 
    fi
}
